{% schema %}
{
  "name": "Product Section",
  "settings": [
    {
      "type": "text",
      "id": "section_header",
      "label": "Section Header",
      "default": "Our Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Select Collection"
    }
  ],
  "presets": [
    {
      "name": "Product Section"
    }
  ]
}
{% endschema %}

<section class="product-section">
  <h2 class="section-title">{{ section.settings.section_header }}</h2>

  {% assign collection = collections[section.settings.collection] %}
  {% if collection and collection.products_count > 0 %}
    <div class="product-grid">
      {% for product in collection.products %}
        <div class="product-card" data-handle="{{ product.handle }}">
          <img 
            src="{{ product.featured_image | image_url: width: 400 }}" 
            alt="{{ product.title }}" 
            class="product-image"
             width="{{ product.featured_image.width }}"
            height="{{ product.featured_image.height }}"
          >
          <h3 class="product-title">{{ product.title }}</h3>
          <p class="price">{{ product.price | money }}</p>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <p>No products found in this collection.</p>
  {% endif %}

  <!-- Popup Modal -->
  <div id="product-popup" class="product-popup">
    <div class="popup-content">
      <span class="close-btn">&times;</span>
      <div id="popup-data">Loading...</div>
    </div>
  </div>
</section>

{% stylesheet %}

.option-tabs {
  display: flex;
  gap: 10px;
  margin: 10px 0 20px;
}
.option-tab {
  padding: 8px 16px;
  border: 1px solid #ccc;
  background: #fff;
  cursor: pointer;
  font-size: 14px;
  border-radius: 4px;
  transition: all 0.2s;
}
.option-tab.active {
  border-color: #000;
  background: #000;
  color: #fff;
}
.option-tab:hover {
  border-color: #000;
}

.product-section {
  padding: 40px 5%;
}
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
}
.product-card {
  cursor: pointer;
  text-align: center;
}
.product-card img {
  width: 100%;
  border-radius: 8px;
}
.product-popup {
  display: none;
  position: fixed; inset: 0;
  background: rgba(0,0,0,0.7);
  z-index: 9999;
  justify-content: center;
  align-items: center;
}
.popup-content {
  background: #fff;
  padding: 20px;
  width: 90%;
  max-width: 600px;
  border-radius: 8px;
  position: relative;
}
.close-btn {
  position: absolute;
  top: 10px; right: 15px;
  font-size: 24px;
  cursor: pointer;
}
#popup-data img {
  max-width: 150px;
  margin-bottom: 15px;
}
.variant-select {
  width: 100%;
  padding: 8px;
  margin: 10px 0;
}
.add-to-cart-btn {
  display: block;
  width: 100%;
  padding: 12px;
  background: black;
  color: white;
  font-size: 16px;
  border: none;
  cursor: pointer;
  margin-top: 15px;
}
.add-to-cart-btn:hover {
  background: #333;
}
{% endstylesheet %}

{% javascript %}
document.addEventListener("DOMContentLoaded", function() {
  const cards = document.querySelectorAll(".product-card");
  const popup = document.getElementById("product-popup");
  const popupData = document.getElementById("popup-data");
  const closeBtn = document.querySelector(".close-btn");

  cards.forEach(card => {
    card.addEventListener("click", function() {
      const handle = this.dataset.handle;
      popup.style.display = "flex";
      popupData.innerHTML = "Loading...";

      fetch(`/products/${handle}.js`)
        .then(response => response.json())
        .then(product => {
          let optionsHtml = "";

          product.options.forEach((option, i) => {
            optionsHtml += `
              <div class="variant-option">
                <label>${option.name}</label>
                <div class="option-tabs" data-option-index="${i}">
                  ${option.values.map((v, idx) => `
                    <button class="option-tab ${idx === 0 ? 'active' : ''}" data-value="${v}">
                      ${v}
                    </button>
                  `).join("")}
                </div>
              </div>
            `;
          });

          popupData.innerHTML = `
            <img src="${product.featured_image}" alt="${product.title}">
            <h2>${product.title}</h2>
            <p><strong>${(product.price/100).toFixed(2)} ${Shopify.currency.active}</strong></p>
            <p>${product.description}</p>
            ${optionsHtml}
            <button class="add-to-cart-btn" data-id="${product.variants[0].id}">
              ADD TO CART â†’
            </button>
          `;

          // Track selected options
          let selectedOptions = product.options.map(opt => opt.values[0]);

          // Tab click handler
          popupData.querySelectorAll(".option-tab").forEach(tab => {
            tab.addEventListener("click", function() {
              const parent = this.closest(".option-tabs");
              parent.querySelectorAll(".option-tab").forEach(btn => btn.classList.remove("active"));
              this.classList.add("active");
              const optIndex = parent.dataset.optionIndex;
              selectedOptions[optIndex] = this.dataset.value;

              // Find matching variant
              const selectedVariant = product.variants.find(v => 
                JSON.stringify(v.options) === JSON.stringify(selectedOptions)
              );
              if (selectedVariant) {
                popupData.querySelector(".add-to-cart-btn").dataset.id = selectedVariant.id;
              }
            });
          });

          // Add to cart
          popupData.querySelector(".add-to-cart-btn").addEventListener("click", function() {
            const variantId = this.dataset.id;
            fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: variantId, quantity: 1 })
            })
            .then(res => res.json())
            .then(() => {
              alert(`${product.title} added to cart!`);
              popup.style.display = "none";
            });
          });
        });
    });
  });

  closeBtn.addEventListener("click", () => popup.style.display = "none");
  window.addEventListener("click", e => { if (e.target === popup) popup.style.display = "none"; });
});
{% endjavascript %}
